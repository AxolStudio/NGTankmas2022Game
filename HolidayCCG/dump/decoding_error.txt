[{
	access: [APublic, AStatic]
	doc: null
	kind: FVar(TPath({
		name: Map
		pack: []
		params: [TPType(TPath({
			name: String
			pack: []
			params: []
			sub: null
		})), TPType(TPath({
			name: Bool
			pack: []
			params: []
			sub: null
		}))]
		sub: null
	}), {
		expr: EArrayDecl([])
		pos: #pos
	})
	meta: []
	name: Flags
	pos: #pos
}, {
	access: [APublic, AStatic]
	doc: null
	kind: FFun({
		args: [{
			meta: []
			name: Requirements
			opt: false
			type: TPath({
				name: Array
				pack: []
				params: [TPType(TPath({
					name: String
					pack: []
					params: []
					sub: null
				}))]
				sub: null
			})
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: EFor({
					expr: EBinop(OpIn, {
						expr: EConst(CIdent(r))
						pos: #pos
					}, {
						expr: EConst(CIdent(Requirements))
						pos: #pos
					})
					pos: #pos
				}, {
					expr: EBlock([{
						expr: EIf({
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(r))
									pos: #pos
								}, startsWith)
								pos: #pos
							}, [{
								expr: EConst(CString(flag:, DoubleQuotes))
								pos: #pos
							}])
							pos: #pos
						}, {
							expr: EBlock([{
								expr: EIf({
									expr: EBinop(OpBoolOr, {
										expr: EUnop(OpNot, false, {
											expr: ECall({
												expr: EField({
													expr: EConst(CIdent(Flags))
													pos: #pos
												}, exists)
												pos: #pos
											}, [{
												expr: ECall({
													expr: EField({
														expr: EConst(CIdent(r))
														pos: #pos
													}, substr)
													pos: #pos
												}, [{
													expr: EConst(CInt(5))
													pos: #pos
												}])
												pos: #pos
											}])
											pos: #pos
										})
										pos: #pos
									}, {
										expr: EUnop(OpNot, false, {
											expr: ECall({
												expr: EField({
													expr: EConst(CIdent(Flags))
													pos: #pos
												}, get)
												pos: #pos
											}, [{
												expr: ECall({
													expr: EField({
														expr: EConst(CIdent(r))
														pos: #pos
													}, substr)
													pos: #pos
												}, [{
													expr: EConst(CInt(5))
													pos: #pos
												}])
												pos: #pos
											}])
											pos: #pos
										})
										pos: #pos
									})
									pos: #pos
								}, {
									expr: EBlock([{
										expr: EReturn({
											expr: EConst(CIdent(false))
											pos: #pos
										})
										pos: #pos
									}])
									pos: #pos
								}, null)
								pos: #pos
							}])
							pos: #pos
						}, {
							expr: EIf({
								expr: ECall({
									expr: EField({
										expr: EConst(CIdent(r))
										pos: #pos
									}, startsWith)
									pos: #pos
								}, [{
									expr: EConst(CString(flag!, DoubleQuotes))
									pos: #pos
								}])
								pos: #pos
							}, {
								expr: EBlock([{
									expr: EIf({
										expr: EBinop(OpBoolAnd, {
											expr: ECall({
												expr: EField({
													expr: EConst(CIdent(Flags))
													pos: #pos
												}, exists)
												pos: #pos
											}, [{
												expr: ECall({
													expr: EField({
														expr: EConst(CIdent(r))
														pos: #pos
													}, substr)
													pos: #pos
												}, [{
													expr: EConst(CInt(5))
													pos: #pos
												}])
												pos: #pos
											}])
											pos: #pos
										}, {
											expr: ECall({
												expr: EField({
													expr: EConst(CIdent(Flags))
													pos: #pos
												}, get)
												pos: #pos
											}, [{
												expr: ECall({
													expr: EField({
														expr: EConst(CIdent(r))
														pos: #pos
													}, substr)
													pos: #pos
												}, [{
													expr: EConst(CInt(5))
													pos: #pos
												}])
												pos: #pos
											}])
											pos: #pos
										})
										pos: #pos
									}, {
										expr: EBlock([{
											expr: EReturn({
												expr: EConst(CIdent(false))
												pos: #pos
											})
											pos: #pos
										}])
										pos: #pos
									}, null)
									pos: #pos
								}])
								pos: #pos
							}, null)
							pos: #pos
						})
						pos: #pos
					}])
					pos: #pos
				})
				pos: #pos
			}, {
				expr: EReturn({
					expr: EConst(CIdent(true))
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: TPath({
			name: Bool
			pack: []
			params: []
			sub: null
		})
	})
	meta: []
	name: meetsRequirements
	pos: #pos
}, {
	access: [APublic, AStatic]
	doc: null
	kind: FFun({
		args: [{
			meta: []
			name: Text
			opt: false
			type: TPath({
				name: String
				pack: []
				params: []
				sub: null
			})
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: ECall({
					expr: EConst(CIdent(trace))
					pos: #pos
				}, [{
					expr: EConst(CIdent(Text))
					pos: #pos
				}])
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: TPath({
			name: Void
			pack: []
			params: []
			sub: null
		})
	})
	meta: []
	name: showDialog
	pos: #pos
}, {
	access: [APublic, AStatic]
	doc: null
	kind: FFun({
		args: [{
			meta: []
			name: Flags
			opt: false
			type: TPath({
				name: Array
				pack: []
				params: [TPType(TPath({
					name: String
					pack: []
					params: []
					sub: null
				}))]
				sub: null
			})
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: EFor({
					expr: EBinop(OpIn, {
						expr: EConst(CIdent(f))
						pos: #pos
					}, {
						expr: EConst(CIdent(Flags))
						pos: #pos
					})
					pos: #pos
				}, {
					expr: EBlock([{
						expr: EIf({
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(f))
									pos: #pos
								}, startsWith)
								pos: #pos
							}, [{
								expr: EConst(CString(flag:, DoubleQuotes))
								pos: #pos
							}])
							pos: #pos
						}, {
							expr: EBlock([{
								expr: ECall({
									expr: EField({
										expr: EField({
											expr: EConst(CIdent(Dialog))
											pos: #pos
										}, Flags)
										pos: #pos
									}, set)
									pos: #pos
								}, [{
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(f))
											pos: #pos
										}, substr)
										pos: #pos
									}, [{
										expr: EConst(CInt(5))
										pos: #pos
									}])
									pos: #pos
								}, {
									expr: EConst(CIdent(true))
									pos: #pos
								}])
								pos: #pos
							}])
							pos: #pos
						}, {
							expr: EIf({
								expr: ECall({
									expr: EField({
										expr: EConst(CIdent(f))
										pos: #pos
									}, startsWith)
									pos: #pos
								}, [{
									expr: EConst(CString(flag!, DoubleQuotes))
									pos: #pos
								}])
								pos: #pos
							}, {
								expr: EBlock([{
									expr: ECall({
										expr: EField({
											expr: EField({
												expr: EConst(CIdent(Dialog))
												pos: #pos
											}, Flags)
											pos: #pos
										}, set)
										pos: #pos
									}, [{
										expr: ECall({
											expr: EField({
												expr: EConst(CIdent(f))
												pos: #pos
											}, substr)
											pos: #pos
										}, [{
											expr: EConst(CInt(5))
											pos: #pos
										}])
										pos: #pos
									}, {
										expr: EConst(CIdent(false))
										pos: #pos
									}])
									pos: #pos
								}])
								pos: #pos
							}, null)
							pos: #pos
						})
						pos: #pos
					}])
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: TPath({
			name: Void
			pack: []
			params: []
			sub: null
		})
	})
	meta: []
	name: setFlags
	pos: #pos
}, {
	access: [APublic, AStatic]
	doc: null
	kind: FFun({
		args: [{
			meta: []
			name: Who
			opt: false
			type: TPath({
				name: String
				pack: []
				params: []
				sub: null
			})
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: EIf({
					expr: ECall({
						expr: EField({
							expr: EConst(CIdent(DialogList))
							pos: #pos
						}, exists)
						pos: #pos
					}, [{
						expr: EConst(CIdent(Who))
						pos: #pos
					}])
					pos: #pos
				}, {
					expr: EBlock([{
						expr: EVars([{
							expr: {
								expr: ECall({
									expr: EField({
										expr: EConst(CIdent(DialogList))
										pos: #pos
									}, get)
									pos: #pos
								}, [{
									expr: EConst(CIdent(Who))
									pos: #pos
								}])
								pos: #pos
							}
							isFinal: false
							meta: []
							name: dialogs
							type: TPath({
								name: Array
								pack: []
								params: [TPType(TPath({
									name: DialogData
									pack: []
									params: []
									sub: null
								}))]
								sub: null
							})
						}])
						pos: #pos
					}, {
						expr: EFor({
							expr: EBinop(OpIn, {
								expr: EConst(CIdent(i))
								pos: #pos
							}, {
								expr: EBinop(OpInterval, {
									expr: EConst(CInt(0))
									pos: #pos
								}, {
									expr: EField({
										expr: EConst(CIdent(dialogs))
										pos: #pos
									}, length)
									pos: #pos
								})
								pos: #pos
							})
							pos: #pos
						}, {
							expr: EBlock([{
								expr: EIf({
									expr: ECall({
										expr: EConst(CIdent(meetsRequirements))
										pos: #pos
									}, [{
										expr: EField({
											expr: EArray({
												expr: EConst(CIdent(dialogs))
												pos: #pos
											}, {
												expr: EConst(CIdent(i))
												pos: #pos
											})
											pos: #pos
										}, requirements)
										pos: #pos
									}])
									pos: #pos
								}, {
									expr: EBlock([{
										expr: ECall({
											expr: EConst(CIdent(showDialog))
											pos: #pos
										}, [{
											expr: EField({
												expr: EArray({
													expr: EConst(CIdent(dialogs))
													pos: #pos
												}, {
													expr: EConst(CIdent(i))
													pos: #pos
												})
												pos: #pos
											}, text)
											pos: #pos
										}])
										pos: #pos
									}, {
										expr: ECall({
											expr: EConst(CIdent(setFlags))
											pos: #pos
										}, [{
											expr: EField({
												expr: EArray({
													expr: EConst(CIdent(dialogs))
													pos: #pos
												}, {
													expr: EConst(CIdent(i))
													pos: #pos
												})
												pos: #pos
											}, after)
											pos: #pos
										}])
										pos: #pos
									}, {
										expr: EReturn({
											expr: EConst(CIdent(true))
											pos: #pos
										})
										pos: #pos
									}])
									pos: #pos
								}, null)
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}])
					pos: #pos
				}, null)
				pos: #pos
			}, {
				expr: EReturn({
					expr: EConst(CIdent(false))
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: TPath({
			name: Bool
			pack: []
			params: []
			sub: null
		})
	})
	meta: []
	name: talk
	pos: #pos
}, {
	access: [APublic, AStatic]
	doc: null
	kind: FVar(TPath({
		name: Map
		pack: []
		params: [TPType(TPath({
			name: String
			pack: []
			params: []
			sub: null
		})), TPType(TPath({
			name: Array
			pack: []
			params: [TPType(TPath({
				name: DialogData
				pack: [holidayccg, globals]
				params: []
				sub: null
			}))]
			sub: null
		}))]
		sub: null
	}), {
		expr: EArrayDecl([{
			expr: EBinop(OpArrow, {
				expr: EConst(CString(intro guy, DoubleQuotes))
				pos: #pos
			}, {
				expr: EArrayDecl([{
					expr: null <- expected value
					pos: null <- expected value
				}, {
					expr: null <- expected value
					pos: null <- expected value
				}])
				pos: #pos
			})
			pos: #pos
		}])
		pos: #pos
	})
	meta: null
	name: DialogList
	pos: #pos
}]
line 626: expected value
line 627: expected value
line 629: expected value
line 630: expected value